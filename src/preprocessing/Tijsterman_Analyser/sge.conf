# Include the application.conf file.
include required(classpath("application"))

workflow-options {
    workflow-log-temporary = false
}

backend {
  # Switch the default backend to "SGE"
  # default = "SGE"
  # default = "SLURM"
  default="local"
  providers {
    local {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
      config {
        concurrent-job-limit = 1

        run-in-background = true

        submit="/bin/bash ${script}"

        # command for killing/aborting
        kill = "kill ${job_id}"
      }
    }

    # Configure the SGE backend
    SGE {
      # Use the config backend factory
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"

      config {
        # Limits the number of concurrent jobs
        #concurrent-job-limit = 100

        # Define runtime attributes for the SGE backend.
        # memory_gb is a special runtime attribute. See the cromwell README for more info.
        runtime-attributes = """
        Int cpu = 1
        Float? memory_gb
	Int memory = 15
        String? sge_queue
        String? sge_project
        """

        # Script for submitting a job to SGE, using runtime attributess.
        # See the cromwell README for more info.
        submit = """
        qsub \
        -terse \
	-S /bin/bash \
	-q all.q \
        -V \
        -b n \
        -N ${job_name} \
        -wd ${cwd} \
        -o ${out} \
        -e ${err} \
        -pe BWA ${cpu} \
	-l h_vmem=${memory}G\
        ${"-P " + sge_project} \
        ${script}
        """

        # command for killing/aborting
        kill = "qdel ${job_id}"

        # Command used at restart to check if a job is alive
        check-alive = "qstat -j ${job_id}"

        # How to search the submit output for a job_id
        job-id-regex = "(\\d+)"
      }
    }
    SLURM {
  	actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
  	config {
        concurrent-job-limit = 100
    		runtime-attributes = """
	    	Int runtime_minutes = 10000
		#Int cpus = 2
		Int cpu = 1
		#Int requested_memory_mb_per_core = 8000
		Int memory = 20
		#String queue = "short"
		"""

		submit = """
			sbatch -J ${job_name} -D ${cwd}  \
            --output=/scratch/cfseale/logs/slurm-%j.out \
            --error=/scratch/cfseale/logs/slurm-%j.err \
            --qos short \
            --time 00:30:00 \
		        --mem ${memory}G \
		        --wrap "/bin/bash ${script}"
		    """
		kill = "scancel ${job_id}"
		check-alive = "squeue -j ${job_id}"
		job-id-regex = "Submitted batch job (\\d+).*"
  	}
     }
  }
}
